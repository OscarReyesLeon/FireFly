# Generated by Django 3.2 on 2024-01-25 22:23

import apps.administration.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BrandVehicleModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Nombre de la marca de vehiculo (Ford, Chevrolet, etc)', max_length=50, unique=True, verbose_name='Nombre')),
                ('description', models.CharField(blank=True, help_text='Breve descripción de la marca de vehiculo (Detalles, etc)', max_length=100, null=True, verbose_name='Descripción')),
                ('user_create', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brandvehiclemodel_user_create', to=settings.AUTH_USER_MODEL)),
                ('user_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brandvehiclemodel_user_update', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Marca de vehiculo',
                'verbose_name_plural': 'Marcas de vehiculo',
                'db_table': 'administration_vehicle_brand',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CategoryProductModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Nombre de la categoría a la que pertenecerá el producto', max_length=50, unique=True, verbose_name='Nombre')),
                ('description', models.CharField(blank=True, help_text='Breve descripción de la categoría que indique su propósito', max_length=100, null=True, verbose_name='Descripción')),
                ('user_create', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categoryproductmodel_user_create', to=settings.AUTH_USER_MODEL)),
                ('user_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categoryproductmodel_user_update', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Categoria de producto',
                'verbose_name_plural': 'Categorias de producto',
                'db_table': 'administration_category_product',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TruckVehicleModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('economic_number', models.CharField(help_text='Número económico del remolque (Ej. 1234)', max_length=10, unique=True, verbose_name='Número económico')),
                ('plates', models.CharField(help_text='Placas del remolque (Ej. ABC1234)', max_length=10, unique=True, verbose_name='Placas')),
                ('type_truck', models.PositiveSmallIntegerField(choices=[(1, 'Pipa'), (2, 'Plataforma')], default=0, help_text='Tipo de remolque', verbose_name='Tipo de remolque')),
                ('is_active', models.BooleanField(default=False, help_text='Indica si el remolque está habilitado para ser usado. Desactivar si está descompueto.', verbose_name='¿Disponible?')),
                ('user_create', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='truckvehiclemodel_user_create', to=settings.AUTH_USER_MODEL)),
                ('user_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='truckvehiclemodel_user_update', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Remolque',
                'verbose_name_plural': 'Remolques',
                'db_table': 'administration_truck_vehicle',
                'ordering': ['economic_number'],
            },
        ),
        migrations.CreateModel(
            name='DriverModel',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', apps.administration.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VehicleModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Nombre con el que se indentifica el vehiculo dentro de la empresa', max_length=50, unique=True, verbose_name='Nombre del vehiculo')),
                ('description', models.CharField(blank=True, help_text='Breve descripción del vehiculo (Detalles, características, etc)', max_length=100, null=True, verbose_name='Descripción')),
                ('economic_number', models.CharField(help_text='Número económico del vehiculo (Ej. 1234)', max_length=5, unique=True, verbose_name='Número económico')),
                ('plates', models.CharField(help_text='Placas del vehiculo (Ej. ABC1234)', max_length=10, unique=True, verbose_name='Placas')),
                ('model', models.CharField(help_text='El modelo del vehiculo (Ej. AVEO 2023)', max_length=20, verbose_name='Modelo')),
                ('type_vehicle', models.PositiveSmallIntegerField(choices=[(0, 'Vehiculo ligero'), (1, 'Vehiculo pesado')], default=0, help_text='Tipo de vehiculo (Ligero, pesado, etc)', verbose_name='Tipo de vehiculo')),
                ('is_active', models.BooleanField(default=False, help_text='Indica si el vehiculo está habilitado para ser usado. Desactivar si está descompueto.', verbose_name='¿Disponible?')),
                ('asigned_truck', models.ManyToManyField(help_text='Remolques asignados al vehiculo (Opcional)', to='administration.TruckVehicleModel', verbose_name='Remolques asignados')),
                ('brand', models.ForeignKey(help_text='Marca comercial del vehiculo', null=True, on_delete=django.db.models.deletion.SET_NULL, to='administration.brandvehiclemodel', verbose_name='Marca del vehiculo')),
                ('responsible', models.ForeignKey(blank=True, help_text='Chofer responsable del vehiculo (Opcional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='administration.drivermodel', verbose_name='Chofer responsable')),
                ('user_create', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vehiclemodel_user_create', to=settings.AUTH_USER_MODEL)),
                ('user_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vehiclemodel_user_update', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vehiculo',
                'verbose_name_plural': 'Vehiculos',
                'db_table': 'administration_vehicle',
                'ordering': ['economic_number'],
            },
        ),
        migrations.CreateModel(
            name='UnitMeasureModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Nombre de la unidad de médida que va a dar de alta (Litros, Toneladas, etc)', max_length=50, unique=True, verbose_name='Nombre')),
                ('description', models.CharField(blank=True, help_text='Breve descripción de la unidad de medida que indique su propósito', max_length=100, null=True, verbose_name='Descripción')),
                ('symbol', models.CharField(blank=True, help_text='Símbolo o abreviatura de la unidad de medida (L, T, etc)', max_length=10, null=True, verbose_name='Símbolo')),
                ('user_create', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unitmeasuremodel_user_create', to=settings.AUTH_USER_MODEL)),
                ('user_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unitmeasuremodel_user_update', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Unidad de medida',
                'verbose_name_plural': 'Unidades de medida',
                'db_table': 'administration_unit_measure',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Nombre con el que se identificará el producto', max_length=50, unique=True, verbose_name='Nombre del producto')),
                ('description', models.CharField(blank=True, help_text='Breve descripción del producto (Nombre comercial, detalles, etc)', max_length=100, null=True, verbose_name='Descripción del producto')),
                ('base_price', models.FloatField(default=0, help_text='Precio base del producto (Precio considerado como referencia para capturistas)', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Precio base')),
                ('image', models.ImageField(blank=True, help_text='Imagen del producto (Opcional)', null=True, upload_to='product/', verbose_name='Imagen del producto')),
                ('category', models.ForeignKey(help_text='Indica la categoría a la que pertenece el producto', null=True, on_delete=django.db.models.deletion.SET_NULL, to='administration.categoryproductmodel', verbose_name='Categoría del producto')),
                ('unit_measure', models.ForeignKey(help_text='Indica la unidad de medida con la que se manejará el producto', null=True, on_delete=django.db.models.deletion.SET_NULL, to='administration.unitmeasuremodel', verbose_name='Unidad de medida')),
                ('user_create', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='productmodel_user_create', to=settings.AUTH_USER_MODEL)),
                ('user_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='productmodel_user_update', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Producto',
                'verbose_name_plural': 'Productos',
                'db_table': 'administration_product',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FuelPumpModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Nombre con el que se identificará la bomba de combustible', max_length=50, unique=True, verbose_name='Nombre')),
                ('description', models.CharField(blank=True, help_text='Breve descripción de la bomba de combustible (Ubicación, detalles, etc)', max_length=100, null=True, verbose_name='Descripción')),
                ('type_fuel_pump', models.PositiveSmallIntegerField(choices=[(0, 'Diesel'), (1, 'Gasolina')], default=0, help_text='Favor de seleccionar el tipo de bomba(Gasolina, diesel, etc)', verbose_name='Tipo de bomba')),
                ('location', models.PositiveSmallIntegerField(choices=[(0, 'Almacén'), (1, 'Planta'), (2, 'Patio')], default=0, help_text='Ubicación con la que se identificará la bomba de combustible', verbose_name='Ubicación')),
                ('user_create', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fuelpumpmodel_user_create', to=settings.AUTH_USER_MODEL)),
                ('user_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fuelpumpmodel_user_update', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Bomba',
                'verbose_name_plural': 'Bombas',
                'db_table': 'administration_fuel_pump',
                'ordering': ['name'],
            },
        ),
    ]
